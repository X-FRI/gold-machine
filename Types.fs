namespace GoldMachine

open System
open Microsoft.ML.Data
open Newtonsoft.Json

/// <summary>
/// Represents the input data for price prediction models.
/// Contains moving averages used as features for machine learning.
/// </summary>
[<CLIMutable>]
type PredictionInput =
  { [<LoadColumn(0)>]
    MA3 : float32
    [<LoadColumn(1)>]
    MA9 : float32 }

/// <summary>
/// Represents the output from a price prediction model.
/// Contains the predicted price score.
/// </summary>
[<CLIMutable>]
type PredictionOutput = { Score : float32 }

/// <summary>
/// Represents training data for machine learning models.
/// Includes features (moving averages) and the target label (actual price).
/// </summary>
[<CLIMutable>]
type TrainingData =
  { [<LoadColumn(0)>]
    MA3 : float32
    [<LoadColumn(1)>]
    MA9 : float32
    [<LoadColumn(2)>]
    Label : float32 }

/// <summary>
/// Represents a trained machine learning model for gold price prediction.
/// Encapsulates the ML context, trained transformer, and data schema.
/// </summary>
type GoldPredictionModel =
  { MLContext : Microsoft.ML.MLContext
    Model : Microsoft.ML.ITransformer
    Schema : Microsoft.ML.DataViewSchema }

/// <summary>
/// Represents a single record of gold price data.
/// Contains the date, closing price, and calculated moving averages.
/// </summary>
type GoldDataRecord =
  { Date : DateTime
    Close : float
    MA3 : float32
    MA9 : float32 }

/// <summary>
/// Represents raw data retrieved from the gold ETF API.
/// Contains date and closing price information.
/// </summary>
type RawGoldETFData =
  { [<JsonProperty("日期")>]
    Date : string
    [<JsonProperty("收盘")>]
    Close : float }

/// <summary>
/// Represents raw data retrieved from the Shanghai Gold Exchange API.
/// Contains OHLC (Open, High, Low, Close) price information.
/// </summary>
type RawGoldSGEData =
  { [<JsonProperty("date")>]
    Date : DateTime
    [<JsonProperty("open")>]
    Open : float
    [<JsonProperty("high")>]
    High : float
    [<JsonProperty("low")>]
    Low : float
    [<JsonProperty("close")>]
    Close : float }

/// <summary>
/// Represents the response structure from the gold ETF API.
/// The API returns a direct array of gold data records.
/// </summary>
type ETFResponse = RawGoldETFData[]

/// <summary>
/// Represents the response structure from the Shanghai Gold Exchange API.
/// The API returns a direct array of OHLC data records.
/// </summary>
type SGEResponse = RawGoldSGEData[]

/// <summary>
/// Union type representing different types of raw data sources.
/// </summary>
type RawDataSource =
  | ETF of RawGoldETFData[]
  | SGE of RawGoldSGEData[]

/// <summary>
/// Enumeration of supported data providers.
/// </summary>
type DataProviderType =
  | ETFProvider
  | SGEProvider

/// <summary>
/// Represents different types of errors that can occur in the system.
/// </summary>
type GoldMachineError =
  | InvalidDateRange of string
  | DataAcquisitionFailed of string
  | ModelTrainingFailed of string
  | FileOperationFailed of string
  | ConfigurationError of string

/// <summary>
/// Configuration settings for the gold price prediction system.
/// Includes API endpoints, data parameters, and model settings.
/// </summary>
type GoldMachineConfig =
  { ApiBaseUrl : string
    Symbol : string
    StartDate : string
    TrainRatio : float
    RiskFreeRate : float
    DataProvider : DataProviderType }

/// <summary>
/// Abstract interface for data providers.
/// Defines the contract for different data sources to implement.
/// </summary>
type IDataProvider =
  /// <summary>
  /// Gets the name of the data provider.
  /// </summary>
  abstract member Name : string

  /// <summary>
  /// Gets the type of the data provider.
  /// </summary>
  abstract member ProviderType : DataProviderType

  /// <summary>
  /// Fetches raw data from the data source.
  /// </summary>
  /// <param name="config">Configuration containing data source parameters.</param>
  /// <returns>Result containing raw data or an error.</returns>
  abstract member FetchRawData :
    GoldMachineConfig -> Async<Result<RawDataSource, GoldMachineError>>

/// <summary>
/// Represents evaluation metrics for model performance.
/// Contains R-squared value and other statistical measures.
/// </summary>
type ModelEvaluation =
  { RSquared : float32
    SharpeRatio : float }

/// <summary>
/// Represents trading signals generated by the strategy.
/// Values: 1.0 for buy signal, 0.0 for hold.
/// </summary>
type TradingSignal = float
